/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Glowbox 3D (https://sketchfab.com/ra3id)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/blade-runner-arcade-cabinet-e7ebdd2a9ca64ece8f8c2c51e0edb9df
title: Blade Runner Arcade Cabinet
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Cube002_Center_Cabinet_0: THREE.Mesh;
    Cube001_Outer_Cabinet_0: THREE.Mesh;
  };
  materials: {
    Center_Cabinet: THREE.MeshPhongMaterial;
    Outer_Cabinet: THREE.MeshPhongMaterial;
  };
};

export default function Model({ ...props }: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials } = useGLTF(
    "/blade_runner_arcade_cabinet/scene.gltf"
  ) as GLTFResult;
  console.log(materials);
  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <mesh
              geometry={nodes.Cube002_Center_Cabinet_0.geometry}
              material={materials.Center_Cabinet}
            />
          </group>
          <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <mesh
              geometry={nodes.Cube001_Outer_Cabinet_0.geometry}
              material={materials.Outer_Cabinet}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/blade_runner_arcade_cabinet/scene.gltf");
